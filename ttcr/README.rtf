{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\b\fs28 Documentation for ttcr programs
\b0\fs24 \
\
Bernard Giroux\
INRS-ETE\
bernard.giroux@ete.inrs.ca\
2014-04-09\
\
There are three programs:\
\
- 
\f1 ttcr2d
\f0  : raytracing on planar 2D meshes\
- 
\f1 ttcr2ds
\f0  : raytracing on undulated surfaces\
- 
\f1 ttcr3d
\f0  : raytracing in 3D\
\
Each program is invoked from the command line, with the same following options:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 -p  Specify parameter file (mandatory)\
-h  print short help message\
-k  Save model in VTK format\
-v  Verbose mode\
-t  Measure time to build grid and perform raytracing\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 \
\
The parameter file is used to specify the raytracing parameters.  It is a plain ascii file and each line has the following format:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 value          # keyword,\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 \
The keywords are :\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0
\f1 \cf0 {\listtext	\uc0\u8259 	}basename : each output file will start with this basename\
{\listtext	\uc0\u8259 	}modelfile : name of file holding grid definition, currently VTK and gmsh formats are accepted (see below)\
{\listtext	\uc0\u8259 	}velfile : velocity in physical domains defined in gmsh files\
{\listtext	\uc0\u8259 	}slofile : slowness of the cells defined in gmsh files\
{\listtext	\uc0\u8259 	}srcfile : name of file containing source location and t0\
{\listtext	\uc0\u8259 	}rcvfile : name of file containing receiver location\
{\listtext	\uc0\u8259 	}secondary nodes : number of secondary nodes for the shortest-path method (SPM)\
{\listtext	\uc0\u8259 	}number of threads : perform raytracing for multiple sources simultaneously using this number of threads\
{\listtext	\uc0\u8259 	}inverse distance : use inverse distance instead of linear interpolation for computing slowness at secondary nodes (SPM in 3D)\
{\listtext	\uc0\u8259 	}metric order : metric used to built sweeping ordering (FSM, see Qian et al. 2007) default is 2\
{\listtext	\uc0\u8259 	}epsilon : convergence criterion (FSM, see Qian et al. 2007) default is 1.e-15\
{\listtext	\uc0\u8259 	}max number of iteration : max number of sweeping iterations (FSM, see Qian et al. 2007) default is 20\
{\listtext	\uc0\u8259 	}saveGridTT : save traveltime over whole grid in VTK format.  This will currently save only the last source.\
{\listtext	\uc0\u8259 	}single precision : work with float rather than double\
{\listtext	\uc0\u8259 	}fast marching : use fast marching method if value == 1 (implemented on 2D & 3D unstructured meshes only)\
{\listtext	\uc0\u8259 	}fast sweeping : use fast sweeping method if value == 1\
{\listtext	\uc0\u8259 	}process reflectors : \
{\listtext	\uc0\u8259 	}saveRayPaths : \
{\listtext	\uc0\u8259 	}raypath high order : compute traveltime gradient on unstructured meshes with high order least-squares (default is 0)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 \
An example is shown below\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 ttcr2ds        # basename,\
model2ds.msh   # modelfile,\
model2ds.vel   # velfile,\
src.dat        # srcfile,\
rcv.dat        # rcvfile,\
1              # number of threads,\
1              # saveGridTT,\
5              # secondary nodes,\
1              # saveRayPaths,\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 Model files
\b0 \
\
1- \ul Rectilinear grids\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \ulc0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \ulnone Models can be defined in VTK format or custom GRD format.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \ul VTK files\ulnone : These files must hold the slowness data, which can be defined either in terms of slowness or velocity, as cell data for grid with cells of constant slowness or as point data for slowness defined at grid nodes.\
\
\ul GRD files\ulnone : For this format, the grid dimensions are given in a file with a .grd extension.  The format is the following, where values are given for x, y and z in that order (2D grids should have 0 cells in y):\
\
--- example.grd ---\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 100 0 200 # number of cells,\
1 1 1 # size of cells,\
0 0 0 # origin of grid, \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 \
------\
\
Slowness values should be provided separately in a 
\f1 slofile
\f0 .  Slowness values can be assigned to nodes or cells, depending on the total number of slowness values given in the file: if the number is equal to the number of nodes, then the values are assigned to nodes and if the number is equal to the number of cells then the values are assinged to the cells.\
\
** Important **\
\
In 2D, the values are ordered for z incremented first, then x, while in 3D the order is x first, then y and finally z, i.e.\
\
In 2D, ordering should correspond to coordinates\
\
xmin			zmin\
xmin			zmin+dz\
xmin			zmin+2dz\
  :			  :\
xmin			zmax\
xmin+dx		zmin\
xmin+dx		zmin+dz\
  :			  :\
xmax		zmax\
\
In 3D, ordering should correspond to coordinates\
\
xmin			ymin			zmin\
xmin+dx		ymin			zmin\
xmin+2dx		ymin			zmin\
  :			  :			  :\
xmax		ymin			zmin\
xmin			ymin+dy		zmin\
xmin+dx		ymin+dy		zmin\
xmin+2dx		ymin+dy		zmin\
  :			  :			  :\
xmax		ymin+dy		zmin\
  :			  :			  :\
xmax		ymax		zmin\
xmin			ymin			zmin+dz\
xmin+dx		ymin			zmin+dz\
  :			  :			  :\
xmax		ymin			zmin+dz\
xmin			ymin+dy		zmin+dz\
  :			  :			  :\
\
etc\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \ul Note regarding the fast sweeping method on rectilinear grids\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \ulnone \
The 2D and 3D implementations require that the cells must be square or cubic respectively .  Only the first value for the size of cell is used when building the grids.\
\
\
\
2- \ul Unstructured meshes\ulnone \
\
Models are defined in either VTK (http://www.vtk.org) or gmsh (http://geuz.org/gmsh/) files. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \ul VTK files\ulnone : As for rectilinear grids, these files must hold the slowness data, which can be defined either in terms of slowness or velocity (see routines in files utils_ttcr.h and VTUReader.h for details).\
\
\ul MSH files\ulnone : gmsh file format version 2.2 is supported.  This format does not allow storing cell attributes, so slowness data must be stored in other files.  There are two options: the first is to have a file holding the slowness values for each cell, in the same cell order than found in the msh file.  This type of file corresponds to the 
\f1 slofile
\f0  found in the parameter file.  The other option is to define velocity values for physical entities (volumes in 3D or surfaces in 2D) found in msh files.  These data are given in 
\f1 velfile
\f0  .  The following give an example of a geometry file used by gmsh to generate the mesh, and the associated 
\f1 velfile
\f0 . \
\
 --- model2ds.geo ---\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 lc = 25;\
\
Point(1) = \{    0,    0, 200, lc \};\
Point(2) = \{    0, 1000, 250, lc \};\
Point(3) = \{ 1000, 1000, 225, lc \};\
Point(4) = \{ 1000,    0, 275, lc \};\
Point(5) = \{    0,  300, 175, lc \};\
Point(6) = \{    0,  600, 300, lc \};\
Point(7) = \{  500, 1000, 150, lc \};\
Point(8) = \{ 1000,  700, 200, lc \};\
Point(9) = \{ 1000,  250, 200, lc \};\
Point(10) = \{ 500,    0, 350, lc \};\
Point(11) = \{ 500,  750, 150, lc \};\
Point(12) = \{ 600,  300, 375, lc \};\
\
Spline(1) = \{ 1, 5, 6 \};\
Spline(2) = \{ 2, 7, 3 \};\
Spline(3) = \{ 3, 8, 9 \};\
Spline(4) = \{ 4, 10, 1 \};\
\
Spline(5) = \{ 6, 11, 3 \};\
Line(6) = \{ 6, 2 \};\
Spline(7) = \{ 9, 12, 1 \};\
Line(8) = \{ 9, 4 \};\
\
Line Loop(1) = \{ 1, 5, 3, 7 \};\
Line Loop(2) = \{ 2, -5, 6 \};\
Line Loop(3) = \{ 8, 4, -7 \};\
\
Ruled Surface(1) = \{ 1 \};\
Ruled Surface(2) = \{ 2 \};\
Ruled Surface(3) = \{ 3 \};\
\
Physical Surface("S1") = \{1\};\
Physical Surface("S2") = \{2\};\
Physical Surface("S3") = \{3\};
\f0 \
\
------\
\
Note that it is possible to impose the creation of given point nodes related to geometrical entities (handy for isolated source points), by defining such points as "physical points" in the geometry file.\
\
---- model2ds.vel ---\
\

\f1 "S1"    3000\
"S2"    5000\
"S3"    2000
\f0 \
\
------\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\i \cf0 Slowness defined at grid nodes for unstructured meshes
\i0 \
\
It is possible to define slowness at grid nodes rather than for mesh cells.  This improves accuracy for models where slowness gradients are present.  For VTK files, this is done by assigning slowness or velocity values at nodes.  For MSH files, this is done by using a 
\f1 slofile
\f0  with slowness values for each mesh node in the order found in the msh file (
\f1 velfile
\f0  cannot be used in this case).\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 Src and Rcv files
\b0 \
\
These are simple ascii file holding the coordinates of the source points and initial time (t0) at the points, and the coordinates of the receivers.  \ul Note that files used by 
\f1 ttcr2d
\f0  should not have y coordinates\ulnone .  The following are two examples for 
\f1 ttcr3d
\f0 .  \
\
--- src1.dat ---\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 2\
0 0 0 0\
1 0 0 0\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 ------\
\
--- rcv.dat ---\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 10\
 10 0 0\
 20 0 0\
 30 0 0\
 40 0 0\
 50 0 0\
 60 0 0\
 70 0 0\
 80 0 0\
 90 0 0\
100 0 0\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 ------\
\
Note that one "source" can have many points in space.  When raytracing is needed for many sources, simply add the files in the parameter file, as shown below.  In that case, setting 
\f1 number of threads 
\f0 to 3 will tell the program to perform raytracing simultaneously for the three sources.  Note that 
\f1 number of threads
\f0  should not be set to a number larger than the number of CPU cores of your machine.  If you have more sources that CPU cores, set 
\f1 number of threads
\f0  to the number of cores, and raytracing will automatically be performed in "batches".\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 ttcr2ds        # basename,\
model2ds.msh   # modelfile,\
model2ds.vel   # velfile,\
src1.dat       # srcfile,\
src2.dat       # srcfile,\
src3.dat       # srcfile,\
rcv.dat        # rcvfile,\
3              # number of threads,\
1              # saveGridTT,\
5              # secondary nodes,\
1              # saveRayPaths,\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b \cf0 Compiling
\b0 \
\
The programs are coded in C++ and follow the C++11 standard.  You must have VTK installed on your system, as well as the eigen3 (http://eigen.tuxfamily.org) and boost (http://www.boost.org) libraries.  These codes were compiled and tested on macs running OSX Mavericks with the default compiler (clang).  They were also tested to some extent under linux with g++ version 4.8.\
\
\

\b References
\b0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 @ARTICLE\{giroux13,\
  author = \{Bernard Giroux and Beno\\^\{\\i\}t Larouche\},\
  title = \{Task-parallel implementation of \{3D\} shortest path raytracing for\
	geophysical applications\},\
  journal = \{Computers & Geosciences\},\
  year = \{2013\},\
  volume = \{54\},\
  pages = \{130--141\},\
  number = \{0\},\
  doi = \{10.1016/j.cageo.2012.12.005\}\
\}\
\
@INPROCEEDINGS\{giroux13b,\
  author = \{Bernard Giroux\},\
  title = \{Shortest path raytracing on tetrahedral meshes\},\
  booktitle = \{75$^\{th\}$ EAGE Conference \\& Exhibition\},\
  year = \{2013\},\
  address = \{London\},\
  organization = \{EAGE\},\
  doi = \{10.3997/2214-4609.20130236\}\
\}\
\
@ARTICLE\{lelievre11,\
  author = \{Leli\\`evre, Peter G. and Farquharson, Colin G. and Hurich, Charles A.\},\
  title = \{Computing first-arrival seismic traveltimes on unstructured 3-\{D\}\
	tetrahedral grids using the Fast Marching Method\},\
  journal = \{Geophysical Journal International\},\
  year = \{2011\},\
  volume = \{184\},\
  pages = \{885-896\},\
  number = \{2\},\
  doi = \{10.1111/j.1365-246X.2010.04880.x\}\
\}\
\
@ARTICLE\{qian07,\
  author = \{Qian, Jianliang and Zhang, Yong-Tao and Zhao, Hong-Kai\},\
  title = \{Fast Sweeping Methods for Eikonal Equations on Triangular Meshes\},\
  journal = \{SIAM Journal on Numerical Analysis\},\
  year = \{2007\},\
  volume = \{45\},\
  pages = \{83--107\},\
  number = \{1\},\
  doi = \{10.1137/050627083\},\
  publisher = \{Society for Industrial and Applied Mathematics\},\
  url = \{http://www.jstor.org/stable/40232919\}\
\}\
\
@Article\{zhang06,\
  Title                    = \{High Order Fast Sweeping Methods for Static \{H\}amilton\'96\{J\}acobi Equations\},\
  Author                   = \{Yong-Tao Zhang and Hong-Kai Zhao and Jianliang Qian\},\
  Journal                  = \{Journal of Scientific Computing\},\
  Year                     = \{2006\},\
  Number                   = \{1\},\
  Pages                    = \{25--56\},\
  Volume                   = \{29\},\
  DOI                      = \{10.1007/s10915-005-9014-3\},\
  URL                      = \{http://dx.doi.org/10.1007/s10915-005-9014-3\}\
\}\
\
@Article\{zhao05,\
  Title                    = \{A Fast Sweeping Method for Eikonal Equations\},\
  Author                   = \{Zhao, Hongkai\},\
  Journal                  = \{Mathematics of Computation\},\
  Year                     = \{2005\},\
  Month                    = apr,\
  Number                   = \{250\},\
  Pages                    = \{603--627\},\
  Volume                   = \{74\},\
  Publisher                = \{American Mathematical Society\},\
  URL                      = \{http://www.jstor.org/stable/4100081\}\
\}\
\
}