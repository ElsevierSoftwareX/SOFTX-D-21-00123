image: Visual Studio 2019

environment:
  matrix:

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x" # currently 3.6.5
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python38-x64"
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "64"

branches:
  only:
    - master

install:

  # Check that we have the expected version and architecture for Python
  - "python --version"

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "python -m pip install --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "pip install -r requirements.txt"

build_script:
  # Build the compiled extension
  - "python setup.py build"

# test_script:
#   # Run the project tests and store results in .xml log
#   - ps: |
#       # this produces nosetests.xml which is uploaded on_finish
#       &$env:PYTHON\python setup.py nosetests --with-xunit
#       if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

# after_test:
#   # If tests are successful, create binary packages for the project.
#   - "%CMD_IN_ENV% python setup.py bdist_wheel"
#   - "%CMD_IN_ENV% python setup.py bdist_wininst"
#   - "%CMD_IN_ENV% python setup.py bdist_msi"
#   - ps: "ls dist"

# artifacts:
#   # Archive the generated packages in the ci.appveyor.com build report.
#   - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#

on_finish:
  # Upload test results to AppVeyor
  - ps: |
      # this uploads nosetests.xml produced in test_script step
      $wc = New-Object 'System.Net.WebClient'
      $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\nosetests.xml))
